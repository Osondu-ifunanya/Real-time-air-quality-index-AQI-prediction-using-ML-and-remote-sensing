{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "435582ec-d4fd-40ff-b888-8aa4296f4235",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ----------------------------\n",
    "# 1. Generate Synthetic Data\n",
    "# ----------------------------\n",
    "\n",
    "np.random.seed(42)\n",
    "n_samples = 1000\n",
    "\n",
    "# Remote sensing proxies and meteorological data\n",
    "aod = np.random.uniform(0.1, 1.5, n_samples)          # Aerosol Optical Depth\n",
    "lst = np.random.uniform(20, 45, n_samples)            # Land Surface Temperature (°C)\n",
    "ndvi = np.random.uniform(0, 0.8, n_samples)           # Vegetation Index\n",
    "wind_speed = np.random.uniform(0, 10, n_samples)      # Wind speed (m/s)\n",
    "\n",
    "# AQI: simulate based on known contributors (inverse to wind & NDVI, direct to AOD, LST)\n",
    "aqi = (\n",
    "    50 + \n",
    "    (aod * 80) + \n",
    "    (lst * 1.5) - \n",
    "    (ndvi * 30) - \n",
    "    (wind_speed * 3) + \n",
    "    np.random.normal(0, 10, n_samples)  # add noise\n",
    ")\n",
    "\n",
    "# DataFrame\n",
    "df = pd.DataFrame({\n",
    "    'AOD': aod,\n",
    "    'LST': lst,\n",
    "    'NDVI': ndvi,\n",
    "    'WindSpeed': wind_speed,\n",
    "    'AQI': aqi\n",
    "})\n",
    "\n",
    "# ----------------------------\n",
    "# 2. Train/Test Split\n",
    "# ----------------------------\n",
    "\n",
    "X = df[['AOD', 'LST', 'NDVI', 'WindSpeed']]\n",
    "y = df['AQI']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# ----------------------------\n",
    "# 3. Train Model\n",
    "# ----------------------------\n",
    "\n",
    "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# ----------------------------\n",
    "# 4. Predict and Evaluate\n",
    "# ----------------------------\n",
    "\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "print(\"R² Score:\", r2_score(y_test, y_pred))\n",
    "print(\"RMSE:\", mean_squared_error(y_test, y_pred, squared=False))\n",
    "\n",
    "# ----------------------------\n",
    "# 5. Plot Results\n",
    "# ----------------------------\n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "plt.scatter(y_test, y_pred, alpha=0.6, edgecolors='k')\n",
    "plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')\n",
    "plt.xlabel(\"Actual AQI\")\n",
    "plt.ylabel(\"Predicted AQI\")\n",
    "plt.title(\"Actual vs Predicted AQI\")\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
